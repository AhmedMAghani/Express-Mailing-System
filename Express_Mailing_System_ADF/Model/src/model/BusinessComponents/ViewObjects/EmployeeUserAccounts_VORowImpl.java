package model.BusinessComponents.ViewObjects;

import java.math.BigDecimal;

import model.BusinessComponents.ViewObjects.common.EmployeeUserAccounts_VORow;

import oracle.jbo.Row;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 24 22:44:44 EET 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EmployeeUserAccounts_VORowImpl extends ViewRowImpl implements EmployeeUserAccounts_VORow {

    public static final int ENTITY_EMPLOYEEUSERACCOUNTS_EO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        AccountId,
        UserName,
        Password,
        Role,
        Employees;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int ACCOUNTID = AttributesEnum.AccountId.index();
    public static final int USERNAME = AttributesEnum.UserName.index();
    public static final int PASSWORD = AttributesEnum.Password.index();
    public static final int ROLE = AttributesEnum.Role.index();
    public static final int EMPLOYEES = AttributesEnum.Employees.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EmployeeUserAccounts_VORowImpl() {
    }

    /**
     * Gets EmployeeUserAccounts_EO entity object.
     * @return the EmployeeUserAccounts_EO
     */
    public EntityImpl getEmployeeUserAccounts_EO() {
        return (EntityImpl) getEntity(ENTITY_EMPLOYEEUSERACCOUNTS_EO);
    }

    /**
     * Gets the attribute value for ACCOUNT_ID using the alias name AccountId.
     * @return the ACCOUNT_ID
     */
    public BigDecimal getAccountId() {
        return (BigDecimal) getAttributeInternal(ACCOUNTID);
    }

    /**
     * Sets <code>value</code> as attribute value for ACCOUNT_ID using the alias name AccountId.
     * @param value value to set the ACCOUNT_ID
     */
    public void setAccountId(BigDecimal value) {
        setAttributeInternal(ACCOUNTID, value);
    }

    /**
     * Gets the attribute value for USER_NAME using the alias name UserName.
     * @return the USER_NAME
     */
    public String getUserName() {
        return (String) getAttributeInternal(USERNAME);
    }

    /**
     * Sets <code>value</code> as attribute value for USER_NAME using the alias name UserName.
     * @param value value to set the USER_NAME
     */
    public void setUserName(String value) {
        setAttributeInternal(USERNAME, value);
    }

    /**
     * Gets the attribute value for PASSWORD using the alias name Password.
     * @return the PASSWORD
     */
    public String getPassword() {
        return (String) getAttributeInternal(PASSWORD);
    }

    /**
     * Sets <code>value</code> as attribute value for PASSWORD using the alias name Password.
     * @param value value to set the PASSWORD
     */
    public void setPassword(String value) {
        setAttributeInternal(PASSWORD, value);
    }

    /**
     * Gets the attribute value for ROLE using the alias name Role.
     * @return the ROLE
     */
    public BigDecimal getRole() {
        return (BigDecimal) getAttributeInternal(ROLE);
    }

    /**
     * Sets <code>value</code> as attribute value for ROLE using the alias name Role.
     * @param value value to set the ROLE
     */
    public void setRole(BigDecimal value) {
        setAttributeInternal(ROLE, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link Employees.
     */
    public Row getEmployees() {
        return (Row) getAttributeInternal(EMPLOYEES);
    }

    /**
     * Sets the master-detail link Employees between this object and <code>value</code>.
     */
    public void setEmployees(Row value) {
        setAttributeInternal(EMPLOYEES, value);
    }
}

